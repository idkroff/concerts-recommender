from dataclasses import dataclass, field
from datetime import datetime as dt
from dataclasses import asdict
from yandex_music import Client
from yandex_music.exceptions import NotFoundError

from app.models.common import Artist


class ArtistsGetter:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–æ–¥—É–ª—è
    """
    def __init__(self, token) -> None:
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ API —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
        """
        self.client: Client = Client(token)
        self.client.init()

    def get_chart(self) -> None:
        """
        –ú–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞ –º–∏—Ä–æ–≤–æ–π —á–∞—Ä—Ç 
        """
        chart = self.client.chart("world").chart
        text = [f'üèÜ {chart.title}', chart.description, '', '–¢—Ä–µ–∫–∏:']

        for track_short in chart.tracks:
            track, chart = track_short.track, track_short.chart
            artists = ''
            if track.artists:
                artists = ' - ' + ', '.join(artist.name for artist in track.artists)

            track_text = f'{track.title}{artists}'

            if chart.progress == 'down':
                track_text = 'üîª ' + track_text
            elif chart.progress == 'up':
                track_text = 'üî∫ ' + track_text
            elif chart.progress == 'new':
                track_text = 'üÜï ' + track_text
            elif chart.position == 1:
                track_text = 'üëë ' + track_text

            track_text = f'{chart.position} {track_text}'
            text.append(track_text)

        print('\n'.join(text))

    def get_artists_from_playlist_by_url(self, playlist_url: str) -> list[Artist]:
        """
        –ú–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –∏ –ø–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        """
        parsed_url = playlist_url.split("/")
        playlist_id = parsed_url[-1]
        user_id = parsed_url[-3]

        found_artists: dict[str, int] = dict()
        result_artists_list: list[Artist] = list()

        # Padding for cases when more than one artist on a track
        track_count_padding = 0
        
        try: 
            response_tracks = self.client.users_playlists(kind=playlist_id, user_id=user_id).fetch_tracks()
            for track in response_tracks:
                track_count_padding += -1 + len(track.track.artists)

                for artist in track.track.artists:
                    if artist.name in found_artists:
                        found_artists[artist.name] += 1
                    else:
                        found_artists[artist.name] = 1

            for artist_name, artist_distibution in found_artists.items():
                result_artists_list.append(Artist(
                        name = artist_name,
                        distibution = round(artist_distibution / (len(response_tracks) + track_count_padding), 2)
                    )
                )

            return sorted(result_artists_list, key=lambda x: (-x.distribution, x.name))
        
        except NotFoundError as e:
            return f"–ü–ª–µ–π–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {playlist_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–º"
