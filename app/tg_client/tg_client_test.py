import pytest
from unittest.mock import AsyncMock
from aiogram.types import Message
from app.tg_client.tg_client import greet_user, process_playlist_link
from app.tg_client.tg_client import handle_reqid_command


@pytest.mark.asyncio
async def test_greet_user():
    """
    –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start.
    """
    message = AsyncMock(spec=Message)
    message.text = "/start"
    message.reply = AsyncMock()

    await greet_user(message)

    message.reply.assert_called_once_with(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ üé∂\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç!\n"
        "–ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è!"
    )


@pytest.mark.asyncio
async def test_process_playlist_link_invalid():
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç.
    """
    message = AsyncMock(spec=Message)
    message.text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç"
    message.message_id = 123
    message.reply = AsyncMock()

    await process_playlist_link(message)

    message.reply.assert_called_once_with(
        "–û–π! üò¨ –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
    )


@pytest.mark.asyncio
async def test_reqid_command_with_reply():
    message = AsyncMock(spec=Message)
    message.reply_to_message = AsyncMock(message_id=12345)
    message.reply = AsyncMock()

    await handle_reqid_command(message)

    message.reply.assert_called_once_with(
        "ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: 12345")
