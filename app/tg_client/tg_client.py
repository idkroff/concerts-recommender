import logging
import os
import re

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
import asyncio

from app.artistsgetter.artists_getter import ArtistsGetter
from app.concertsgetter.concerts_getter import *
from app.gptenricher.enricher import GPTEnricher

TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

if not TG_BOT_TOKEN:
    raise ValueError("TG_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

bot = Bot(token=TG_BOT_TOKEN)

dp = Dispatcher()


@dp.message(Command("start"))
async def greet_user(message: Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ üé∂\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç!\n"
        "–ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è!"
    )


@dp.message()
async def process_playlist_link(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç.
    """

    link = None
    user_input = message.text.strip()

    match = re.search(r'(https?://music\.yandex\.ru/.*)', user_input)

    if match:
        link = match.group(1)
        user_input = user_input.replace(link, "").strip()

    if "music.yandex.ru" not in link:
        await message.reply(
            "–û–π! üò¨ –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        )
        return

    await message.reply("–ü–æ–ª—É—á–µ–Ω–æ! üìù –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç...")

    try:
        ag = ArtistsGetter(os.getenv("YANDEX_MUSIC_TOKEN"))
        artists = ag.get_artists_from_playlist_by_url(
            playlist_url=link)

        if not artists:
            await message.reply(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Ç–≤–æ—ë–º –ø–ª–µ–π–ª–∏—Å—Ç–µ. üòî –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥–æ–π –ø–ª–µ–π–ª–∏—Å—Ç."
            )
            return

        await message.reply("–ò—â—É –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞... üé§")

        obj = ConcertsGetter(artists)
        concerts = await obj.extract_concerts()

        if concerts:
            distribution = {
                artist.name: artist.distribution for artist in artists}

            enricher = GPTEnricher()
            # user_input = "–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –∏–∑ –º–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞"
            enriched_output = enricher.enrich(
                user_input=user_input,
                concerts=concerts,
                distribution=distribution
            )
            await message.reply("–í–æ—Ç —á—Ç–æ –º—ã –Ω–∞—à–ª–∏:\n\n" + enriched_output)
        else:
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞. üòî")

    except Exception as e:
        logging.error(f"Error processing playlist link: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
    """
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
