import logging

from aiogram import *
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.dispatcher.dispatcher import Dispatcher


from app.artistsgetter.artists_getter import ArtistsGetter
# from app.concerts_getter.concerts_getter import get_concerts
from app.gptenricher.enricher import GPTEnricher

API_TOKEN = "8085801358:AAHQBk89mSGY1hlRwXZXaw-Xy0qrosSlXcw"

logging.basicConfig(level=logging.INFO)


class TelegramClient:
    def __init__(self):
        self.bot = Bot(token=API_TOKEN)
        self.dp = Dispatcher(self.bot)

        self.dp.register_message_handler(self.greet_user, commands=["start"])
        self.dp.register_message_handler(
            self.process_playlist_link, content_types=["text"])

    async def greet_user(self, message: Message):
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ üé∂\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç!"
        )

    async def process_playlist_link(self, message: Message):
        link = message.text.strip()
        if "music.yandex.ru" not in link:
            await message.reply(
                "–û–π! üò¨ –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
            )
            return

        await message.reply("–ü–æ–ª—É—á–µ–Ω–æ! üìù –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç...")

        try:
            artists = get_artists(link)
            if not artists:
                await message.reply(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Ç–≤–æ—ë–º –ø–ª–µ–π–ª–∏—Å—Ç–µ. üòî –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥–æ–π –ø–ª–µ–π–ª–∏—Å—Ç."
                )
                return

            await message.reply("–ò—â—É –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞... üé§")

            concerts = get_concerts(artists)
            enriched_response = enrich_concerts(
                concerts, user_input=message.text)

            if not enriched_response:
                await message.reply(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞. üòî –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥–æ–π –ø–ª–µ–π–ª–∏—Å—Ç."
                )
                return

            reply = "–Ø –Ω–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å! –í–æ—Ç —Å–ø–∏—Å–æ–∫:\n"
            for artist, concert_list in enriched_response.items():
                for concert in concert_list:
                    reply += (
                        f"üé∂ {artist}\n"
                        f"üìÖ –î–∞—Ç–∞: {concert['date']}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {concert['location']}\n\n"
                    )

            await message.reply(reply)

        except Exception as e:
            logging.error(f"Error processing playlist link: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

    def serve(self):
        executor.start_polling(self.dp, skip_updates=True)
